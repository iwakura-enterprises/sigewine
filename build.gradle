plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'jacoco'
    id 'jacoco-report-aggregation'

    id "tech.medivh.plugin.publisher" version "1.2.3"
}

subprojects {

    group = 'enterprises.iwakura'
    version = '1.3.0'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: 'jacoco'
    apply plugin: 'jacoco-report-aggregation'
    apply plugin: "tech.medivh.plugin.publisher"

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        // https://mvnrepository.com/artifact/org.reflections/reflections/0.10.2
        implementation 'org.reflections:reflections:0.10.2'
        testImplementation 'org.reflections:reflections:0.10.2'

        // https://mvnrepository.com/artifact/org.slf4j/slf4j-api/2.0.17
        implementation 'org.slf4j:slf4j-api:2.0.17'

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.38'
        annotationProcessor 'org.projectlombok:lombok:1.18.38'
        testCompileOnly 'org.projectlombok:lombok:1.18.38'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'

        // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
        implementation 'net.bytebuddy:byte-buddy:1.17.5'

        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'

        testImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
        testImplementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            csv.required.set(true)
        }
    }

    // UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    task publishCloseAndRelease() {
        dependsOn 'cleanBuildMedivhMavenRepo'
        dependsOn 'uploadToSonatype'
    }

    shadowJar {
        destinationDirectory = file("../build/libs")
    }

    jar {
        destinationDirectory = file("../build/libs")
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier.set('javadoc')
        destinationDirectory = file("../build/libs")
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier.set('sources')
        destinationDirectory = file("../build/libs")
    }

    signing {
        useInMemoryPgpKeys(
                System.getenv("GPG_KEY_ID"),
                System.getenv("GPG_PRIVATE_KEY"),
                System.getenv("GPG_PASSWORD")
        )
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    shadowJar.dependsOn javadocJar
    shadowJar.dependsOn sourcesJar
    shadowJar.dependsOn jar

    components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
        skip()
    }
}

repositories {
}

dependencies {
}

shadowJar {
    archiveBaseName.set('sigewine')
    archiveVersion.set('1.3.0')
    archiveClassifier.set('all')
    destinationDirectory = file("$buildDir/libs")

    // Include all subprojects
    subprojects.each { subproject ->
        from(subproject.sourceSets.main.output)
        subproject.configurations.runtimeClasspath.each { file ->
            if (file.exists()) {
                from(zipTree(file))
            }
        }
    }
}